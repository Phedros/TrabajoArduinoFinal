# Trabajo grupal TinkerCad 
![Tinkercad](./imagenes/imagenprincipal.PNG)


## Integrantes 
- Pedro Serra
- Nicolas Sanchez 
- Mateo Roberto


## Proyecto: Multiplexación.
![Tinkercad](./imagenes/arduinopartedos.PNG)


## Descripción
Consta de una placa de Arduino, de la cual se desprenden diversos cables que otorgan funcionamiento a través de una diferencia de potencial a 2 display de 7 segmentos y 3 botones. Los tres botones realizan modificaciones en el numero que forman ambos displays.

## Función principal
A traves de los botones del proyecto permite incrementar, reducir o resetear el número que forman ambos display, este va desde 00 hasta 99. Cada uno de los botones tiene su función de manera independiente. En caso que, se incremente en 1 valor el número que se muestra en los display cuando este se encuentra en "99", volvera a "00"; y si se reduce en 1 el valor del display cuando este se encuentre en "00", volvera a "99".



~~~ C (lenguaje en el que esta escrito)
/*
Defino diferentes nombres a los pines con los que 
voy a trabajar
*/
#define G 12 
#define F 13
#define E 11
#define D 10
#define C 9
#define A 7
#define B 8
#define AUMENTAR 6
#define RESET 5
#define SWITCH 4
#define UNIDAD A2
#define DECENA A3
#define MOTOR 3
#define SENSORFLEXION A4
#define FOTODIODO A1

/*
Configuración de pines
*/

void setup()
{
for (int i=7; i<=13; i++)
  {
  pinMode(i, OUTPUT);
  }
for (int i=4; i<=6; i++)
  {
  pinMode(i, INPUT_PULLUP);
  }
  pinMode (UNIDAD, OUTPUT);
  pinMode (DECENA, OUTPUT);
  pinMode (MOTOR, OUTPUT);
  pinMode(SENSORFLEXION, INPUT);
  pinMode(FOTODIODO, INPUT);
  Serial.begin(9600);
}

////////////////////////////////////////////////////

/*
Seteo variables con sus respectivos valores en 1(uno)
Seteo un contador en 0(cero)
*/

int contador = 0;
int lecturaAnteriorAumentar = 1;
int lecturaAnteriorReset = 1;
int lecturaAnteriorRestar = 1;

int primoInicio = 1;
int primoInicioPrevia = 0;

int fotosensor = 0;
int lecturaAnteriorFotosensor = 1;

////////////////////////////////////////////////////

void loop ()
{
  
  /*
  PARTE 3 DEL EXAMEN
  
  Aqui agrego la variable fotosensor donde le asigno el valor de
  la medicion del fotoiodo
  
  Si en algun momento el sensor sensa un valor por arriba de 100
  se setea el contador al valor de 50 por unica vez
  
  Para que ocurra de nuevo este evento, el fotosensor debera
  sensar por debajo de 1000 y luego subir por arriba de 1000
  nuevamente
  
  
  */
  
  fotosensor = analogRead(FOTODIODO);
  
  
  Serial.println(fotosensor);
  
  if (fotosensor > 1000 && lecturaAnteriorFotosensor < 1000)
  {
  contador = 50;
  }
  
  lecturaAnteriorFotosensor = fotosensor;
  
  /*
  Establecer condiciones para que se cambie a números primos.
  
  Entre estas se encuentra la función map() que es para determinar
  el grado de flexión del sensor, recibe como parametro la señal, 
  que sería la lectura que hace el dispositivo (mediante
  analogRead()), el valor minimo y máximo de lectura, y
  la magnitud fisica minima y maxima.
  */

  int flexion = map(analogRead(SENSORFLEXION), 236, 634, 0, 180);
  primoInicio = digitalRead(SWITCH);
  if (primoInicio == 0 && flexion == 0)
  {
    primoInicioPrevia = 0;
  }
  if (primoInicio == 1 && primoInicioPrevia == 0 && flexion == 180)
  {
    contador = proximoPrimo(contador, AUMENTAR);
    primoInicioPrevia = primoInicio;
  }
  
    /*
  Se llama a la funcion keyPressed(), y se le asigna el valor a
  pressed, que puede ser
  	-SUBE
    -RESET
  
  Segun este valor asignado, aumenta o resetea el 
  valor del contador
  
  A su vez, si se cumplen las condiciones, que es el
  deslizamiento del switch y la flexión del sensor, retornara
  los números primos
  */
  
  int pressed = KeyPressed();
  if (pressed == AUMENTAR)
  {
    if (primoInicio == 0 && flexion == 0)
    {
      contador++;
      if(contador > 99)
      {
        contador = 0;
      }
  	}
    else if (flexion == 180)
    {
      contador = proximoPrimo(contador, pressed);
    }
  }
  
    
    
 	if (pressed == RESET)
    {
       if (primoInicio == 0)
       {
       contador = 0; 
       }
     else
     {
       contador = proximoPrimo(contador, pressed);
     }
    } 
  
  /*
  Llamo a la funcion printCount() con el valor
  del contador
  */
  
  printCount(contador);  
  
  /*
  Usamos analogWrite() para controlar la intensidad del motor,
  se pasa como parametro el pin que queremos controlar y el valor
  de intensidad que se desea establecer
  */
  analogWrite(MOTOR,contador);
  }

////////////////////////////////////////////////////

int KeyPressed()
{
  
  /*
  Se setean las variables sube y reset
  Si no se oprimen los botones se leen como 1(uno)
  cuando se opriman los botones se leera 0(cero)
  */
  
  int aumentar = digitalRead(AUMENTAR);
  int reset = digitalRead(RESET);
  
  /*
  En cualquier momento que se desprima algun boton se van a 
  igualar los valores de valorPrevio y valor actual. Por ello
  no van a poder entrar al loop donde se retorna respuesta.
  
  En la primera vuelta de loop, se le asigna al valorPrevio el 
  valor del valor actual. De este modo no vuelve a entrar
  en el loop.
  */
  	
  
  if (aumentar == 1)
  {
    lecturaAnteriorAumentar = 1;
  }
  
  if (reset == 1)
  {
    lecturaAnteriorReset = 1;
  }
  
  if (aumentar == 0 && lecturaAnteriorAumentar == 1)
  {
   lecturaAnteriorAumentar = aumentar;
   return AUMENTAR; 
  }
     
  if (reset == 0 && lecturaAnteriorReset == 1)
  {
   lecturaAnteriorReset = reset;
   return RESET;
	}
}

////////////////////////////////////////////////////

void MostrarNumero(int NumeroEnDisplay){
  
  ApagarDisplay();
  /*
  Apago los leds
  */
  switch (NumeroEnDisplay) 
  {
  /*
  Prendo los leds correspondientes al numero que
  ingresa como parametro
  */
  case 0:
  digitalWrite(A, HIGH);
  digitalWrite(B, HIGH);
  digitalWrite(C, HIGH);
  digitalWrite(D, HIGH);
  digitalWrite(E, HIGH);
  digitalWrite(F, HIGH);
  break;
  
  case 1:
  digitalWrite(B, HIGH);
  digitalWrite(C, HIGH);
  break;
  
  case 2:
  digitalWrite(A, HIGH);
  digitalWrite(B, HIGH);
  digitalWrite(D, HIGH);
  digitalWrite(E, HIGH);
  digitalWrite(G, HIGH);
  break;
  
  case 3:
  digitalWrite(A, HIGH);
  digitalWrite(B, HIGH);
  digitalWrite(C, HIGH);
  digitalWrite(D, HIGH);
  digitalWrite(G, HIGH);
  break;
  
  case 4:
  digitalWrite(B, HIGH);
  digitalWrite(C, HIGH);
  digitalWrite(F, HIGH);
  digitalWrite(G, HIGH);
  break;
  
  case 5:
  digitalWrite(A, HIGH);
  digitalWrite(C, HIGH);
  digitalWrite(D, HIGH);
  digitalWrite(F, HIGH);
  digitalWrite(G, HIGH);
  break;
  
  case 6:
  digitalWrite(A, HIGH);
  digitalWrite(C, HIGH);
  digitalWrite(D, HIGH);
  digitalWrite(E, HIGH);
  digitalWrite(F, HIGH);
  digitalWrite(G, HIGH);
  break;
  
  case 7:
  digitalWrite(A, HIGH);
  digitalWrite(B, HIGH);
  digitalWrite(C, HIGH);
  break;
  
  case 8:
  digitalWrite(A, HIGH);
  digitalWrite(B, HIGH);
  digitalWrite(C, HIGH);
  digitalWrite(D, HIGH);
  digitalWrite(E, HIGH);
  digitalWrite(F, HIGH);
  digitalWrite(G, HIGH);
  break;
  
  case 9:
  digitalWrite(A, HIGH);
  digitalWrite(B, HIGH);
  digitalWrite(C, HIGH);
  digitalWrite(F, HIGH);
  digitalWrite(G, HIGH);
  break;
  }
}

////////////////////////////////////////////////////

void ApagarDisplay()
{
  /*
  Funcion para apagar todos los leds
  */
  digitalWrite(A, LOW);
  digitalWrite(B, LOW);
  digitalWrite(C, LOW);
  digitalWrite(D, LOW);
  digitalWrite(E, LOW);
  digitalWrite(F, LOW);
  digitalWrite(G, LOW);
}

////////////////////////////////////////////////////

void EncenderLed (int digito)
{
  /*
  Con esta funcion puedo determinar que display se
  prende, en relacion a que digito ingresa como parametro
  Si ingresa UNIDAD, 
  	-prendo display de derecha y apago el de la izquierda
  Si ingresa DECENA
  	-prendo display de izquierda y apago el de la derecha
  */
  if (digito == UNIDAD)
  {
    digitalWrite(UNIDAD, LOW);
    digitalWrite(DECENA, HIGH);
    delay(10); //Para que vaya más rápido 
  }
  if (digito == DECENA)
  {
    digitalWrite(UNIDAD, HIGH);
    digitalWrite(DECENA, LOW);
    delay(10);
  }
  else
  {
    digitalWrite(UNIDAD, HIGH);
    digitalWrite(DECENA, HIGH);
    delay(10);
  }
    
  
}

//////////////////////////////////////////////////

void printCount (int NumeroContador)
{
  EncenderLed(0); //Para que se apaguen los display
  MostrarNumero(NumeroContador / 10); //Mando la señal de la decena
  EncenderLed (DECENA); //Prendo el display de la decena
  EncenderLed(0);//Para que se apaguen los display
  MostrarNumero(NumeroContador % 10);//Mando la señal de la unidad
  EncenderLed(UNIDAD);//Prendo display de la unidad
}

////////////////////////////////////////////////////
int proximoPrimo(int contador, int pressed)
{
  /*
  Función para que retorne el contador en caso que sea verdadero
  que el número es primo
  
  A su vez, como segundo parametro que recibe la función, si se
  si detecta que se ingreso sumar,  aumentara en uno (con sus
  respectivos controles de NO devolverlo en caso que NO sea
  primo) y reset para volver a 2.
  */
  while (true)
  {
    if (pressed == AUMENTAR)
    {
      contador++;
      if (contador > 99)
      {
      contador = 0;
      }
    }
    else if (pressed == RESET)
    {
      contador = 2;
    }
    
    if (numeroEsPrimo(contador) == true)
    {
      return contador;
    }
    
  }
}
  
/////////////////////////////////////////////////////

bool numeroEsPrimo(int num) 
{
  /*
  Función para que devuelva verdadero si el número que se pasa
  por parametro es primo
  */
    bool primo = true;
  	if (num < 2)
    {
      return false;
    }
  	else
    {
      for(int i = 2; i < num; i++) 
      {
        if (num % i == 0) 
        {
            primo = false;
            break;
        }
      }
      return primo;
    }
}



~~~

## :robot: Link al proyecto
- [Proyecto](https://www.tinkercad.com/things/34vmM1zva4y-copy-of-stunning-lappi-kieran/editel?sharecode=F42e5XHR80Ocge0p2highHbdIEys9grwlMNyKdWlhOA).

---
### Fuentes
- [Sistemas de Procesamiento de Datos - Clase 4
](https://www.youtube.com/watch?v=_Ry7mtURGDE&t=1755s).
